x-db-env: &db-env
  POSTGRES_USER: ${POSTGRES_USER:-awecount}
  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-awecount}
  POSTGRES_DATABASE: ${POSTGRES_DATABASE:-awecount}
  POSTGRES_PORT: ${POSTGRES_PORT:-5432}
  POSTGRES_HOST: ${POSTGRES_HOST:-awecount-db}
  PGDATA: ${PGDATA:-/var/lib/postgresql/data}

x-redis-env: &redis-env
  REDIS_URL: ${REDIS_URL:-redis://awecount-redis:6379}

x-app-env: &app-env
  APP_URL: ${APP_URL:-http://localhost}
  DEBUG: ${DEBUG:-False}
  SECRET_KEY: ${SECRET_KEY}
  SERVER_EMAIL: ${SERVER_EMAIL}
  DEFAULT_FROM_EMAIL: ${DEFAULT_FROM_EMAIL}
  EMAIL_HOST: ${EMAIL_HOST}
  EMAIL_PORT: ${EMAIL_PORT}
  EMAIL_USE_TLS: ${EMAIL_USE_TLS}
  EMAIL_USE_SSL: ${EMAIL_USE_SSL}
  EMAIL_HOST_USER: ${EMAIL_HOST_USER}
  EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
  ALLOW_SIGNUP: ${ALLOW_SIGNUP:-False}
  GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
  GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}

x-sentry-env: &sentry-env
  SENTRY_DSN: ${SENTRY_DSN}
  SENTRY_ENVIRONMENT: ${SENTRY_ENVIRONMENT}

x-proxy-env: &proxy-env
  PROXY_PORT: ${PROXY_PORT:-80}
  BUCKET_NAME: ${AWS_S3_BUCKET_NAME:-uploads}
  FILE_SIZE_LIMIT: ${FILE_SIZE_LIMIT:-5242880}
  SITE_ADDRESS: ${SITE_ADDRESS:-${APP_URL:-:80}}

# x-minio-env: &minio-env
#   MINIO_ROOT_USER: ${AWS_ACCESS_KEY_ID:-access-key}
#   MINIO_ROOT_PASSWORD: ${AWS_SECRET_ACCESS_KEY:-secret-key}

# x-aws-s3-env: &aws-s3-env
#   AWS_REGION: ${AWS_REGION:-}
#   AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-access-key}
#   AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-secret-key}
#   AWS_S3_ENDPOINT_URL: ${AWS_S3_ENDPOINT_URL:-http://awecount-minio:9000}
#   AWS_S3_BUCKET_NAME: ${AWS_S3_BUCKET_NAME:-uploads}

services:
  # Comment this if you already have a reverse proxy running
  proxy:
    image: caddy:2-alpine
    ports:
      - "80:80"
      # - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - frontend_dist:/srv
    environment:
      <<: *proxy-env
    depends_on:
      - frontend
      # - backend

  frontend:
    build:
      context: ./web/app
      dockerfile: Dockerfile
      target: dist
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    environment:
      API_URL: ${APP_URL}
      ALLOW_SIGNUP: ${ALLOW_SIGNUP}
    volumes:
      - frontend_dist:/srv
    # depends_on:
    #   - backend

  # backend:
  #   build:
  #     context: ./server/django
  #     dockerfile: Dockerfile
  #   command: ./bin/docker-entrypoint-server.sh
  #   deploy:
  #     replicas: 1
  #     restart_policy:
  #       condition: on-failure
  #   environment:
  #     <<: [ *app-env, *db-env, *redis-env, *sentry-env ]
  #     USE_WHITENOISE: "True"

  #   depends_on:
  #     - awecount-db
  #     - awecount-redis

  # worker:
  #   build:
  #     context: ./server/django
  #     dockerfile: Dockerfile
  #   command: ./bin/docker-entrypoint-worker.sh
  #   deploy:
  #     replicas: 1
  #     restart_policy:
  #       condition: on-failure
  #   environment:
  #     <<: [ *app-env, *db-env, *redis-env, *sentry-env ]
  #   depends_on:
  #     - backend
  #     - awecount-db
  #     - awecount-redis

  # migrator:
  #   build:
  #     context: ./server/django
  #     dockerfile: Dockerfile
  #   command: ./bin/docker-entrypoint-migrator.sh
  #   deploy:
  #     replicas: 1
  #     restart_policy:
  #       condition: on-failure
  #   environment:
  #     <<: [ *app-env, *db-env, *redis-env, *sentry-env ]
  #   depends_on:
  #     - awecount-db
  #     - awecount-redis

  # awecount-db:
  #   image: postgres:16-alpine
  #   deploy:
  #     replicas: 1
  #     restart_policy:
  #       condition: on-failure
  #   command: postgres -c 'max_connections=1000'
  #   environment:
  #     <<: *db-env
  #   volumes:
  #     - pgdata:/var/lib/postgresql/data

  # awecount-redis:
  #   image: valkey/valkey:7.2-alpine
  #   deploy:
  #     replicas: 1
  #     restart_policy:
  #       condition: on-failure
  #   environment:
  #     <<: *redis-env
  #   volumes:
  #     - redisdata:/data

volumes:
  pgdata:
  redisdata:
  caddy_data:
  frontend_dist: