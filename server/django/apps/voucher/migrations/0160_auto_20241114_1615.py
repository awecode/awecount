# Generated by Django 4.2.16 on 2024-11-14 10:30

from django.db import migrations

from decimal import Decimal
from django.db import migrations


def create_payment_modes(apps, schema_editor):
    Company = apps.get_model('users', 'Company')
    Account = apps.get_model('ledger', 'Account')
    PaymentMode = apps.get_model('voucher', 'PaymentMode')
    SalesVoucher = apps.get_model('voucher', 'SalesVoucher')
    PurchaseVoucher = apps.get_model('voucher', 'PurchaseVoucher')
    CreditNote = apps.get_model('voucher', 'CreditNote')
    DebitNote = apps.get_model('voucher', 'DebitNote')
    SalesSetting = apps.get_model('voucher', 'SalesSetting')
    PurchaseSetting = apps.get_model('voucher', 'PurchaseSetting')

    def get_or_create_bank_payment_mode(company, bank_account):
        kwargs = {
            "company": company,
            "account": bank_account.ledger,
            "name": bank_account.bank_name or bank_account.account_name,
        }
        if bank_account.commission_account:
            kwargs["transaction_fee_account"] = bank_account.commission_account

        if bank_account.transaction_commission_percent:
            kwargs["transaction_fee_config"] = {
                "type": "percentage",
                "value": str(Decimal.from_float(bank_account.transaction_commission_percent))
            }

        payment_mode, _ = PaymentMode.objects.get_or_create(**kwargs)
        return payment_mode

    def process_vouchers(company, voucher_set, cash_payment_mode):
        to_update = []
        for voucher in voucher_set:
            if voucher.payment_mode_id:
                continue

            if voucher.mode == "Credit":
                voucher.payment_mode = None
            elif voucher.mode == "Cash":
                voucher.payment_mode = cash_payment_mode
            elif voucher.mode == "Bank Deposit" and hasattr(voucher, 'bank_account') and voucher.bank_account:
                voucher.payment_mode = get_or_create_bank_payment_mode(company, voucher.bank_account)

            to_update.append(voucher)

        return to_update

    for company in Company.objects.all():
        # Get or create cash payment mode
        try:
            cash_account = Account.objects.get(company=company, name="Cash", code="A-C-C")
            cash_payment_mode, _ = PaymentMode.objects.get_or_create(
                company=company,
                name="Cash",
                account=cash_account
            )
        except Account.DoesNotExist:
            continue

        # Process Sales Vouchers
        sales_vouchers = process_vouchers(company, SalesVoucher.objects.filter(company=company), cash_payment_mode)
        if sales_vouchers:
            SalesVoucher.objects.bulk_update(sales_vouchers, ["payment_mode"])

        # Process Purchase Vouchers
        purchase_vouchers = process_vouchers(company, PurchaseVoucher.objects.filter(company=company), cash_payment_mode)
        if purchase_vouchers:
            PurchaseVoucher.objects.bulk_update(purchase_vouchers, ["payment_mode"])

        # Process Credit Notes
        credit_notes = process_vouchers(company, CreditNote.objects.filter(company=company), cash_payment_mode)
        if credit_notes:
            CreditNote.objects.bulk_update(credit_notes, ["payment_mode"])

        # Process Debit Notes
        debit_notes = process_vouchers(company, DebitNote.objects.filter(company=company), cash_payment_mode)
        if debit_notes:
            DebitNote.objects.bulk_update(debit_notes, ["payment_mode"])

        # Process Settings
        if hasattr(company, 'sales_setting') and not company.sales_setting.payment_mode:
            if company.sales_setting.mode == "Cash":
                company.sales_setting.payment_mode = cash_payment_mode
                company.sales_setting.save()

        if hasattr(company, 'purchase_setting') and not company.purchase_setting.payment_mode:
            if company.purchase_setting.mode == "Cash":
                company.purchase_setting.payment_mode = cash_payment_mode
                company.purchase_setting.save()


def reverse_payment_modes(apps, schema_editor):
    SalesVoucher = apps.get_model('voucher', 'SalesVoucher')
    PurchaseVoucher = apps.get_model('voucher', 'PurchaseVoucher')
    CreditNote = apps.get_model('voucher', 'CreditNote')
    DebitNote = apps.get_model('voucher', 'DebitNote')

    def reverse_vouchers(voucher_model):
        for voucher in voucher_model.objects.all():
            if not voucher.payment_mode:
                voucher.mode = "Credit"
            elif voucher.payment_mode.name == "Cash":
                voucher.mode = "Cash"
            else:
                voucher.mode = "Bank Deposit"
            voucher.payment_mode = None

        if voucher_model.objects.exists():
            voucher_model.objects.bulk_update(voucher_model.objects.all(), ["mode", "payment_mode"])

    reverse_vouchers(SalesVoucher)
    reverse_vouchers(PurchaseVoucher)
    reverse_vouchers(CreditNote)
    reverse_vouchers(DebitNote)


class Migration(migrations.Migration):

    dependencies = [
        ('voucher', '0159_alter_creditnote_mode_alter_debitnote_mode_and_more'),
    ]

    operations = [
        migrations.RunPython(create_payment_modes, reverse_payment_modes),
    ]
