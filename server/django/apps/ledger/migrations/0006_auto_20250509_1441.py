# Generated by Django 4.2.20 on 2025-05-09 08:56

from django.db import migrations
from django.conf import settings


class Migration(migrations.Migration):
    """
    Migration to create and update interest income/expense categories and accounts.
    This migration:
    1. Updates system codes for Direct and Indirect Income categories
    2. Creates Interest Income/Expense categories under Indirect Income/Expenses
    3. Creates corresponding Interest Income/Expense accounts
    4. Uses bulk operations for better performance
    """

    dependencies = [
        ("ledger", "0005_alter_account_current_cr_alter_account_current_dr_and_more"),
    ]

    def migrate_interest_income_expense_category(apps, schema_editor):
        # Get required models
        Company = apps.get_model("company", "Company")
        Category = apps.get_model("ledger", "Category")
        Account = apps.get_model("ledger", "Account")

        # Update system codes for income categories
        Category.objects.filter(code="I-D").update(
            system_code=settings.ACCOUNT_CATEGORY_SYSTEM_CODES["Direct Income"]
        )
        Category.objects.filter(code="I-I").update(
            system_code=settings.ACCOUNT_CATEGORY_SYSTEM_CODES["Indirect Income"]
        )

        # Fetch all companies and their parent categories efficiently
        companies = Company.objects.all()
        indirect_income_categories = {
            cat.company_id: cat
            for cat in Category.objects.filter(
                system_code=settings.ACCOUNT_CATEGORY_SYSTEM_CODES["Indirect Income"],
                company__in=companies,
            )
        }
        indirect_expense_categories = {
            cat.company_id: cat
            for cat in Category.objects.filter(
                system_code=settings.ACCOUNT_CATEGORY_SYSTEM_CODES["Indirect Expenses"],
                company__in=companies,
            )
        }

        # Get existing interest categories to avoid duplicates
        existing_interest_categories = set(
            Category.objects.filter(
                system_code__in=[
                    settings.ACCOUNT_CATEGORY_SYSTEM_CODES["Interest Income"],
                    settings.ACCOUNT_CATEGORY_SYSTEM_CODES["Interest Expenses"],
                ],
                company__in=companies,
            ).values_list("company_id", "system_code")
        )

        for company in companies:
            company_id = company.id
            indirect_income = indirect_income_categories.get(company_id)
            indirect_expenses = indirect_expense_categories.get(company_id)

            if not indirect_income or not indirect_expenses:
                continue

            # Handle Interest Income category and account
            if (
                company_id,
                settings.ACCOUNT_CATEGORY_SYSTEM_CODES["Interest Income"],
            ) not in existing_interest_categories:
                # Get the rightmost node of the parent to calculate lft/rgt values
                rightmost_sibling = (
                    Category.objects.filter(parent=indirect_income)
                    .order_by("-rght")
                    .first()
                )

                # Calculate new lft/rgt values
                if rightmost_sibling:
                    lft = rightmost_sibling.rght + 1
                else:
                    lft = indirect_income.lft + 1
                rght = lft + 1
                level = indirect_income.level + 1
                tree_id = indirect_income.tree_id

                interest_income_category = Category(
                    name="Interest Income",
                    code="I-I-II",
                    parent=indirect_income,
                    company=company,
                    default=True,
                    system_code=settings.ACCOUNT_CATEGORY_SYSTEM_CODES[
                        "Interest Income"
                    ],
                    lft=lft,
                    rght=rght,
                    level=level,
                    tree_id=tree_id,
                )
                interest_income_category.save()
                account = Account(
                    name="Interest Income",
                    code="I-I-II-II",
                    category=interest_income_category,
                    company=company,
                    default=True,
                    system_code=settings.ACCOUNT_CATEGORY_SYSTEM_CODES[
                        "Interest Income"
                    ],
                )
                account.save()
            else:
                # Create account if category exists but account doesn't
                if not Account.objects.filter(
                    system_code=settings.ACCOUNT_CATEGORY_SYSTEM_CODES[
                        "Interest Income"
                    ],
                    company=company,
                ).exists():
                    account = Account(
                        name="Interest Income",
                        code="I-I-II-II",
                        category=Category.objects.get(
                            system_code=settings.ACCOUNT_CATEGORY_SYSTEM_CODES[
                                "Interest Income"
                            ],
                            company=company,
                        ),
                        company=company,
                        default=True,
                        system_code=settings.ACCOUNT_CATEGORY_SYSTEM_CODES[
                            "Interest Income"
                        ],
                    )
                    account.save()

            # Handle Interest Expenses category and account
            if (
                company_id,
                settings.ACCOUNT_CATEGORY_SYSTEM_CODES["Interest Expenses"],
            ) not in existing_interest_categories:
                # Get the rightmost node of the parent to calculate lft/rgt values
                rightmost_sibling = (
                    Category.objects.filter(parent=indirect_expenses)
                    .order_by("-rght")
                    .first()
                )

                # Calculate new lft/rgt values
                if rightmost_sibling:
                    lft = rightmost_sibling.rght + 1
                else:
                    lft = indirect_expenses.lft + 1
                rght = lft + 1
                level = indirect_expenses.level + 1
                tree_id = indirect_expenses.tree_id

                interest_expense_category = Category(
                    name="Interest Expenses",
                    code="E-I-IE",
                    parent=indirect_expenses,
                    company=company,
                    default=True,
                    system_code=settings.ACCOUNT_CATEGORY_SYSTEM_CODES[
                        "Interest Expenses"
                    ],
                    lft=lft,
                    rght=rght,
                    level=level,
                    tree_id=tree_id,
                )
                interest_expense_category.save()
                account = Account(
                    name="Interest Expenses",
                    code="E-I-IE-IE",
                    category=interest_expense_category,
                    company=company,
                    default=True,
                    system_code=settings.ACCOUNT_CATEGORY_SYSTEM_CODES[
                        "Interest Expenses"
                    ],
                )
                account.save()
            else:
                # Create account if category exists but account doesn't
                if not Account.objects.filter(
                    system_code=settings.ACCOUNT_CATEGORY_SYSTEM_CODES[
                        "Interest Expenses"
                    ],
                    company=company,
                ).exists():
                    account = Account(
                        name="Interest Expenses",
                        code="E-I-IE-IE",
                        category=Category.objects.get(
                            system_code=settings.ACCOUNT_CATEGORY_SYSTEM_CODES[
                                "Interest Expenses"
                            ],
                            company=company,
                        ),
                        company=company,
                        default=True,
                        system_code=settings.ACCOUNT_CATEGORY_SYSTEM_CODES[
                            "Interest Expenses"
                        ],
                    )
                    account.save()

        # Bulk create categories and accounts if any exist

    operations = [
        migrations.RunPython(
            code=migrate_interest_income_expense_category,
            reverse_code=migrations.RunPython.noop,
        ),
    ]
